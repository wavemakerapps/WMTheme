/*Generated by WaveMaker Studio*/
package com.hrdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.sql.Date;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;

import com.hrdb.models.query.InsertQueryUserRequest;
import com.hrdb.models.query.InsertQuesryEmployeeRequest;
import com.hrdb.models.query.InsertQuesryVacationRequest;

@Service
public class HrdbQueryExecutorServiceImpl_V1 implements HrdbQueryExecutorService_V1 {

    private static final Logger LOGGER = LoggerFactory.getLogger(HrdbQueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("hrdbWMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(value = "hrdbTransactionManager")
    @Override
    public int executeInsertQuesryEmployee(Integer empId, String lastname, String firstname, String username, String password, String street, String city, String state, String zip, Date birthdate, Integer tenantId) {
        Map params = new HashMap(11);

        params.put("EMP_ID", empId);
        params.put("LASTNAME", lastname);
        params.put("FIRSTNAME", firstname);
        params.put("USERNAME", username);
        params.put("PASSWORD", password);
        params.put("STREET", street);
        params.put("CITY", city);
        params.put("STATE", state);
        params.put("ZIP", zip);
        params.put("BIRTHDATE", birthdate);
        params.put("TENANT_ID", tenantId);

        return queryExecutor.executeNamedQueryForUpdate("insertQuesryEmployee", params);
    }

    @Transactional(value = "hrdbTransactionManager")
    @Override
    public int executeInsertQuery_User(String username, String password, String role, Integer tenantId) {
        Map params = new HashMap(4);

        params.put("USERNAME", username);
        params.put("PASSWORD", password);
        params.put("ROLE", role);
        params.put("TENANT_ID", tenantId);

        return queryExecutor.executeNamedQueryForUpdate("insertQuery_User", params);
    }

    @Transactional(value = "hrdbTransactionManager")
    @Override
    public int executeInsertQuesryVacation(Integer id, Date startDate, Date endDate, Integer empId, Integer tenantId, String status, String typecol) {
        Map params = new HashMap(7);

        params.put("ID", id);
        params.put("START_DATE", startDate);
        params.put("END_DATE", endDate);
        params.put("EMP_ID", empId);
        params.put("TENANT_ID", tenantId);
        params.put("STATUS", status);
        params.put("TYPECol", typecol);

        return queryExecutor.executeNamedQueryForUpdate("insertQuesryVacation", params);
    }

}