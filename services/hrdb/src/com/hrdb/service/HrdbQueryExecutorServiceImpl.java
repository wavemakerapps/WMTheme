/*Generated by WaveMaker Studio*/
package com.hrdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;

import com.hrdb.models.query.InsertQueryUserRequest;
import com.hrdb.models.query.InsertQuesryEmployeeRequest;
import com.hrdb.models.query.InsertQuesryVacationRequest;

@Service
public class HrdbQueryExecutorServiceImpl implements HrdbQueryExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(HrdbQueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("hrdbWMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(value = "hrdbTransactionManager")
    @Override
    public Integer executeInsertQuesryEmployee(InsertQuesryEmployeeRequest insertQuesryEmployeeRequest) {
        Map<String, Object> params = new HashMap<>(11);

        params.put("EMP_ID", insertQuesryEmployeeRequest.getEmpId());
        params.put("LASTNAME", insertQuesryEmployeeRequest.getLastname());
        params.put("FIRSTNAME", insertQuesryEmployeeRequest.getFirstname());
        params.put("USERNAME", insertQuesryEmployeeRequest.getUsername());
        params.put("PASSWORD", insertQuesryEmployeeRequest.getPassword());
        params.put("STREET", insertQuesryEmployeeRequest.getStreet());
        params.put("CITY", insertQuesryEmployeeRequest.getCity());
        params.put("STATE", insertQuesryEmployeeRequest.getState());
        params.put("ZIP", insertQuesryEmployeeRequest.getZip());
        params.put("BIRTHDATE", insertQuesryEmployeeRequest.getBirthdate());
        params.put("TENANT_ID", insertQuesryEmployeeRequest.getTenantId());

        return queryExecutor.executeNamedQueryForUpdate("insertQuesryEmployee", params);
    }

    @Transactional(value = "hrdbTransactionManager")
    @Override
    public Integer executeInsertQuery_User(InsertQueryUserRequest insertQueryUserRequest) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("USERNAME", insertQueryUserRequest.getUsername());
        params.put("PASSWORD", insertQueryUserRequest.getPassword());
        params.put("ROLE", insertQueryUserRequest.getRole());
        params.put("TENANT_ID", insertQueryUserRequest.getTenantId());

        return queryExecutor.executeNamedQueryForUpdate("insertQuery_User", params);
    }

    @Transactional(value = "hrdbTransactionManager")
    @Override
    public Integer executeInsertQuesryVacation(InsertQuesryVacationRequest insertQuesryVacationRequest) {
        Map<String, Object> params = new HashMap<>(7);

        params.put("ID", insertQuesryVacationRequest.getId());
        params.put("START_DATE", insertQuesryVacationRequest.getStartDate());
        params.put("END_DATE", insertQuesryVacationRequest.getEndDate());
        params.put("EMP_ID", insertQuesryVacationRequest.getEmpId());
        params.put("TENANT_ID", insertQuesryVacationRequest.getTenantId());
        params.put("STATUS", insertQuesryVacationRequest.getStatus());
        params.put("TYPECol", insertQuesryVacationRequest.getTypecol());

        return queryExecutor.executeNamedQueryForUpdate("insertQuesryVacation", params);
    }

}